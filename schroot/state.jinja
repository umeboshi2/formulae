{% from 'debootstrap/state.jinja' import debootstrap_state, debootstrap_prepare_data %}
{% from 'debootstrap/vendor_data.jinja' import vendor_data %}

{%- macro schroot_basedir(root_key='schroot') -%}
{{ salt['pillar.get'](root_key + ':basedir',
     salt['pillar.get']('debootstrap:basedir', '/srv/chroots')) }}
{%- endmacro -%}

{% macro schroot_state(data, conf={}, sls_require='schroot.prereq') %}
{{ debootstrap_state(data, apt_update=False, sls_require=sls_require) }}

schroot_{{ data.id }}_config_file:
  file.managed:
    - name: /etc/schroot/chroot.d/{{ data.id }}
    - source: salt://schroot/schroot.conf
    - template: jinja
    - user: root
    - group: root
    - mode: 644
    - context:
        data: {{ data }}
        schroot_conf: {{ conf }}
        schroot_name: {{ data.id }}
    - require:
      - cmd: debootstrap_{{ data.id }}

schroot_{{ data.id }}_apt_update:
  cmd.wait:
    - name: schroot -c {{ data.id }} -p -- sh -c "apt-get update && apt-get -o Dpkg::Options::=--force-confnew -o Dpkg::Options::=--force-confdef -y dist-upgrade"
    - env:
      - DEBIAN_FRONTEND: noninteractive
    - user: root
    - group: root
    - require:
      - file: schroot_{{ data.id }}_config_file
    - watch:
      - file: debootstrap_{{ data.id }}_sources_list
{% endmacro %}

{%- macro generate_schroot_name(name, arch, data) -%}
{{ data['schroot_name_format'].format(name=name, arch=arch) }}
{%- endmacro -%}

{%- macro generate_aliases(name, arch, data) -%}
{%- set aliases = [] -%}
{%- if data.get('dist_aliases', False) -%}
{%- for alias in vendor_data[data['vendor']]['dists'][data['dist']].get('aliases', []) -%}
{%- set schroot_name = '{}'.format(generate_schroot_name(alias, arch, data)) -%}
{%- do aliases.append(schroot_name) -%}
{%- if data.get('short_alias', False) and arch == grains['osarch'] -%}
{%- do aliases.append(alias) -%}
{%- endif -%}
{%- endfor -%}
{%- endif -%}
{%- if data.get('short_alias', False) and arch == grains['osarch'] -%}
{%- do aliases.append(name) -%}
{%- endif -%}
{%- for alias in data.get('extra_aliases', []) -%}
{%- set schroot_name = '{}'.format(generate_schroot_name(alias, arch, data)) -%}
{%- do aliases.append(schroot_name) -%}
{%- endfor -%}
{%- for alias in aliases -%}
{{ alias }}{% if not loop.last %},{% endif %}
{%- endfor -%}
{%- endmacro -%}

{% set default_data = {
    'schroot_name_format': '{name}-{arch}',
    'dist_aliases': False,
    'short_alias': True,
    'cdebootstrap_options': '--flavour=standard',
} %}
{% set default_conf = {
    'profile': 'default',
    'groups': 'root',
    'root-groups': 'root',
} %}

{% macro schroot_state_loop(root_key='schroot', default_data=default_data,
                            default_conf=default_conf, sls_require='schroot.prereq') %}
{% for name, pillar_data in salt['pillar.get'](root_key + ':chroots', {}).items() %}
  {% set architectures = pillar_data.get('architectures',
      [pillar_data.get('arch', grains['osarch'])]) %}
  {% for arch in architectures %}
    {# Generate the data #}
    {% set schroot_data = default_data.copy() %}
    {% do schroot_data.update(pillar_data) %}
    {% do schroot_data.update(arch=arch) %}
    {% do schroot_data.setdefault('dist', name) %}
    {% do schroot_data.setdefault('basedir', '{}'.format(schroot_basedir(root_key))) %}
    {% set schroot_name = '{}'.format(generate_schroot_name(name, arch, schroot_data)) %}
    {% do schroot_data.update(id=schroot_name) %}
    {% do debootstrap_prepare_data(schroot_data) %}
    {# Generate the schroot configuration #}
    {% set schroot_aliases = '{}'.format(generate_aliases(name, arch, schroot_data)) %}
    {% set schroot_conf = default_conf.copy() %}
    {% do schroot_conf.update(salt['pillar.get'](root_key + ':schroot.conf', {})) %}
    {% do schroot_conf.update(pillar_data.get('schroot.conf', {})) %}
    {% if schroot_aliases %}
    {% do schroot_conf.update(aliases=schroot_aliases) %}
    {% endif %}
{{ schroot_state(schroot_data, schroot_conf, sls_require=sls_require) }}
  {% endfor %}
{% endfor %}
{% endmacro %}


